# -*- encoding:utf-8-*-

import GAforANN as GA_ANN
import ANNtoJSON as ann_js
import HelpFuncs as hf
import matplotlib.pyplot as plt
import numpy as np

layers = [3, 1, 1]


def plotss(networks):
    time = 10
    t = np.arange(0, time, 0.1)
    nu = [
        [-8, -4, 0], [-10, -4, 0], [-8, -5, 0],
        [8, -4, 0], [10, -4, 0], [-8, -5, 0],
        [-8, 4, 0], [-10, 4, 0], [-8, 5, 0],
        [8, 4, 0], [10, 4, 0], [8, 5, 0],
    ]
    glob_x = []
    glob_y = []
    glob_tetas = []
    for y0 in nu:
        res = hf.ode45(networks, hf.system, t, y0, 0.1)
        xs = [y0[0]] + res[0]
        ys = [y0[1]] + res[1]
        tetas = [y0[2]] + res[2]
        glob_x.append(xs)
        glob_y.append(ys)
        glob_tetas.append(tetas)

    plt.figure(1)
    plt.axis([-25, 25, -10, 10])
    # plt.hold()
    plt.plot(hf.barrier1_x, hf.barrier1_y, 'b')
    plt.plot(hf.barrier2_x, hf.barrier2_y, 'b')
    for j in range(len(nu)):
        plt.plot(glob_x[j], glob_y[j], 'r')
    plt.show()


if __name__ == "__main__":

    the_best = GA_ANN.run_ga_for_ann(
       geno_len=30,
       pop_len=30,
       cycles=20)[0]

    # f = open('best_structure.json', 'w')
    # f.write(ann_js.newJSON(the_best))
    # f.close()

    plotss(the_best.networks)
    # the_best.network.plot()



































# {
#     "genotype": "[96, 77, 20.0, 26, 119, 104, 112, 130, 80, 18.0, 89, 6, 93, 24, 2, 66, 199, 9, 70, 83, 73, 108, 154, 138, 5, 1, 147, 114, 31, 28]",
#     "phenotype": [
#         "self.network.change_active_func(7,5)",
#         "self.network.change_active_func(3,4)",
#         "self.network.add_layer(4,5)",
#         "self.network.change_active_func(7,1)",
#         "self.network.add_neurons(4,4)",
#         "self.network.add_layer(5,9)",
#         "self.network.add_neurons(8,5)"
#     ],
#     "time": "39.6",
#     "value": "1.04391701358",
#     "weights": "(0.7913827,1.5972053,1.6621144,-0.5803575;0.9218311,1.2270729,1.7321174,-0.3672926;1.5590502,-1.2983686,1.0531928,0.157357;1.1014458,0.4723185,0.71902,1.8759722;-0.7628231,1.4503189,1.4613839,-1.5326649;-0.2428628,-0.315659,0.5627819,-0.4536851;-1.0952053,1.4658374,1.445818,1.765599;-1.1034676,-1.6203322,-1.8594204,-0.4761455;-1.5470094,1.39798,0.1678558,1.6147068)\n(1.4510109,-1.3272851,-0.1830826,1.6180812,-1.6349223,-1.2579925,-1.6082372,-1.8483704,-0.3266328,-0.1304684;0.4796685,1.9757002,-1.0239316,1.1207464,0.44857,0.9518989,-1.550573,-0.4885417,-1.1470035,1.3070326;-1.5876768,-0.4980042,1.2322253,-1.2173893,1.9383185,1.6533495,1.5207116,-1.8905045,0.9122771,-1.7480268;0.2500104,-0.1321733,1.6128103,0.0464977,-1.0920863,0.1569145,-1.543258,-0.2816932,0.4268017,1.0898249;-0.2616065,1.3794719,-0.6226767,-0.962781,-0.1351204,1.5311161,-1.2648295,1.4179089,0.3111388,-0.5908409)\n(-1.0416772,1.7331892,-0.384012,-0.845784,-1.8988437,-1.53213;1.8538215,1.0016624,-1.1134652,0.2463364,0.7766436,-0.8978563;-0.4280832,-1.5705937,-0.3649714,-1.5175599,1.9356781,0.0141227;-0.6267991,-1.1412344,-1.547324,-1.4700858,1.5362179,-0.459801;1.8599802,1.1816123,-1.6037398,-0.4595058,1.7627186,-0.4870043;1.701934,0.0156219,-1.8688719,-0.7555408,-0.1869955,-1.8963444)\n(0.2624393,1.7670853,-0.6450728,0.1306625,1.2203067,-0.2446839,1.7716188;-0.4166492,1.0219587,1.8929751,-1.2353636,-1.3514748,0.9797897,-0.4575975)"
# }